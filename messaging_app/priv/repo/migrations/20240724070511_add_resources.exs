defmodule MessagingApp.Repo.Migrations.AddResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:workspaces, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text, null: false
      add :organization_id, :uuid
    end

    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :name, :text, null: false

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "users_workspace_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :organization_id, :uuid
    end

    create table(:organizations, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
    end

    alter table(:workspaces) do
      modify :organization_id,
             references(:organizations,
               column: :id,
               name: "workspaces_organization_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:users) do
      modify :organization_id,
             references(:organizations,
               column: :id,
               name: "users_organization_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:organizations) do
      add :name, :text, null: false
    end

    create table(:messages, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
      add :message, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "messages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :channel_id, :uuid
    end

    create table(:channels, primary_key: false) do
      add :id, :uuid, null: false, primary_key: true
    end

    alter table(:messages) do
      modify :channel_id,
             references(:channels,
               column: :id,
               name: "messages_channel_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:channels) do
      add :name, :text, null: false
      add :description, :text
      add :is_public, :boolean

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "channels_workspace_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:channel_users, primary_key: false) do
      add :user_id,
          references(:users,
            column: :id,
            name: "channel_users_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :channel_id,
          references(:channels,
            column: :id,
            name: "channel_users_channel_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint(:channel_users, "channel_users_user_id_fkey")

    drop constraint(:channel_users, "channel_users_channel_id_fkey")

    drop table(:channel_users)

    drop constraint(:channels, "channels_workspace_id_fkey")

    alter table(:channels) do
      remove :workspace_id
      remove :updated_at
      remove :inserted_at
      remove :is_public
      remove :description
      remove :name
    end

    drop constraint(:messages, "messages_channel_id_fkey")

    alter table(:messages) do
      modify :channel_id, :uuid
    end

    drop table(:channels)

    drop constraint(:messages, "messages_user_id_fkey")

    drop table(:messages)

    alter table(:organizations) do
      remove :name
    end

    drop constraint(:users, "users_organization_id_fkey")

    alter table(:users) do
      modify :organization_id, :uuid
    end

    drop constraint(:workspaces, "workspaces_organization_id_fkey")

    alter table(:workspaces) do
      modify :organization_id, :uuid
    end

    drop table(:organizations)

    drop constraint(:users, "users_workspace_id_fkey")

    drop table(:users)

    drop table(:workspaces)
  end
end
